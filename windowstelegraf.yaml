heat_template_version: 2016-10-14

description: >
  Create a simple VM using Heat


parameters:
  sg_type:
    type: string
    default: default

  key:
    type: string
    description: >
      Name of a KeyPair to enable SSH access to the instance.
    default: mohan

  flavor:
    type: string
    description: Instance type for the docker server.
    default: m1.large

  public_net:
    type: string
    description: name of public network for which floating IP addresses will be allocated.
    default: non-prod2

  availabilityZone:
    type: string
    default: nova

  vmAvailabilityZone:
    type: string
    default: JMNG-PE3-NONPROD

  internalNet:
    type: string
    description: internal network name
    default: mohankumar1n_network
  internalSubnet:
    type: string
    description: internal subnet name
    default: mohankumar1n_subnet
  securityGroup:
    type: string
    description: security group name
    default: default123
  volumeName:
    type: string
    description: name of the bootable volume
    default: mohan
  serverName:
    type: string
    description: name of the instance
    default: mohan-telegraf
  volumeSize:
    type: number
    default: 40

  bootImage:
    type: string
    default: Windows-Server-2012-Std

  proxy_ip:
    type: string
    default: http://10.157.240.254:8678

  istelegrafon:
    type: string
    default: restart

  isprodvm:
    type: string
    default: non-prod

  commandLog:
    type: boolean
    default: false

  telegraf_agent_max_timeout:
    type: number
    default: 3600
    description: >
      The maximum allowed time for the telegraf Agent instalation to finish.


conditions:
  custom: {equals: [{get_param: sg_type}, "custom"]}
  default: {equals: [{get_param: sg_type}, "default"]}


resources:
  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { get_param: securityGroup }
      description: Default security group created by JAWS console
      rules: [
             {"direction": ingress,
              "remote_ip_prefix": 0.0.0.0/0,
              "port_range_min": 22,
              "port_range_max": 22,
              "ethertype": IPv4,
              "protocol": tcp},
              {"direction": ingress,
              "remote_ip_prefix": 0.0.0.0/0,
              "port_range_min": 80,
              "port_range_max": 80,
              "ethertype": IPv4,
              "protocol": tcp},
              {"direction": ingress,
               "remote_ip_prefix": 0.0.0.0/0,
               "port_range_min": 3389,
               "port_range_max": 3389,
               "ethertype": IPv4,
               "protocol": tcp},
              {"direction": ingress,
              "remote_ip_prefix": 0.0.0.0/0,
              "port_range_min": 443,
              "port_range_max": 443,
              "ethertype": IPv4,
              "protocol": tcp}

            ]
    condition: default

  server_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: internalNet }
      fixed_ips:
        - subnet_id: { get_param: internalSubnet  }
      security_groups:
        - { if: ["custom", { get_param: securityGroup }, { get_resource: security_group } ] }

  server_floating_ip:
    type: OS::Nova::FloatingIP
    properties:
      pool: { get_param: public_net}

  associate_floating_ip:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: server_floating_ip}
      server_id: { get_resource: server}

  "files": {
      "telegrafagent.ps1": "#ps1_sysnative\n\n# Copyright 2014 Cloudbase Solutions Srl\n#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n#    License for the specific language governing permissions and limitations\n#    under the License.\n\n$ErrorActionPreference = 'Stop'\n\n$moduleName = \"telegrafagent.psm1\"\n$cfnFolder = \"c:\\cfn\"\n$modulePath = Join-Path $cfnFolder $moduleName\nImport-Module -Name $modulePath -DisableNameChecking -Force\n\nInstall-TelegrafAgent\n", "heat-powershell-utils.psm1": "#ps1_sysnative\n\n# Copyright 2014 Cloudbase Solutions Srl\n#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n#    License for the specific language governing permissions and limitations\n#\n\nfunction LogTo-File {\n    param(\n        $LogMessage,\n        $LogFile = \"C:\\cfn\\userdata.log\",\n        $Topic = \"General\"\n    )\n\n    $date = Get-Date\n    $fullMessage = \"$date | $Topic | $LogMessage\"\n    Add-Content -Path $LogFile -Value $fullMessage\n}\n\nfunction Log-HeatMessage {\n    param(\n        [string]$Message\n    )\n\n    Write-Host $Message\n}\n\nfunction Get-Proxy (){\n    Get-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings' | Select-Object ProxyServer, ProxyEnable\n}\n\nfunction Set-Proxy {\n    [CmdletBinding()]\n    [Alias('proxy')]\n    [OutputType([string])]\n    Param\n    (\n        # server address\n        [Parameter(Mandatory = $true,\n            ValueFromPipelineByPropertyName = $true,\n            Position = 0)]\n        $server,\n        # port number\n        [Parameter(Mandatory = $true,\n            ValueFromPipelineByPropertyName = $true,\n            Position = 1)]\n        $port\n    )\n\n      Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings' -name ProxyServer -Value \"$($server):$($port)\"\n        Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings' -name ProxyEnable -Value 1\n     Get-Proxy #Show the configuration\n}\n\nfunction Remove-Proxy (){\n    Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings' -name ProxyServer -Value \"\"\n    Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings' -name ProxyEnable -Value 0\n}\n\n<#\n.Synopsis\nThis function will set the proxy settings provided as input to the cmdlet.\n.Description\nThis function will set the proxy server and (optinal) Automatic configuration script.\n.Parameter ProxyServer\nThis parameter is set as the proxy for the system.\nData from. This parameter is Mandatory\n.Example\nSetting proxy information\nSet-InternetProxy -proxy \"proxy:7890\"\n.Example\nSetting proxy information and (optinal) Automatic Configuration Script\nSet-InternetProxy -proxy \"proxy:7890\" -acs \"http://proxy:7892\"\n#>\n\n\nFunction Set-InternetProxy\n{\n    [CmdletBinding()]\n    Param(\n\n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [String[]]$Proxy,\n\n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [AllowEmptyString()]\n        [String[]]$acs\n\n    )\n\n    Begin\n    {\n\n            $regKey=\"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n\n    }\n\n    Process\n    {\n\n        Set-ItemProperty -path $regKey ProxyEnable -value 1\n\n        Set-ItemProperty -path $regKey ProxyServer -value $proxy\n\n        if($acs)\n        {\n\n                 Set-ItemProperty -path $regKey AutoConfigURL -Value $acs\n        }\n\n    }\n\n    End\n    {\n\n        Write-Output \"Proxy is now enabled\"\n\n        Write-Output \"Proxy Server : $proxy\"\n\n        if ($acs)\n        {\n\n            Write-Output \"Automatic Configuration Script : $acs\"\n\n        }\n        else\n        {\n\n            Write-Output \"Automatic Configuration Script : Not Defined\"\n\n        }\n    }\n}\n\nAdd-Type -AssemblyName System.IO.Compression.FileSystem\nfunction unzip {\n        param( [string]$ziparchive, [string]$extractpath )\n        [System.IO.Compression.ZipFile]::ExtractToDirectory( $ziparchive, $extractpath )\n}\n\nfunction configchange {\n        param( [string]$metadataurl, [string]$metadatapath, [string]$telegrafconfpath )\n        Invoke-WebRequest -Uri $metadataurl -OutFile $metadatapath\n        $values = Get-Content $metadatapath | Out-String | ConvertFrom-Json\n        $Env:serverid = $values.uuid\n        (Get-Content $telegrafconfpath -Raw) -replace 'windowsvmid',\"$($Env:serverid)\" | Set-Content $telegrafconfpath\n}\n\nfunction createfile {\n        param( [string]$text)\n        $text | Set-Content 'c:\\longrunning.ps1'\n}\n\nExport-ModuleMember -Function *\n", "telegrafagent.psm1": "#ps1_sysnative\n\n# Copyright 2014 Cloudbase Solutions Srl\n#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n#    License for the specific language governing permissions and limitations\n#    under the License.\n\n$ErrorActionPreference = 'Stop'\n$currentLocation = \"c:\\cfn\"\n$modulePath = \"heat-powershell-utils.psm1\"\n$fullPath = Join-Path $currentLocation $modulePath\nImport-Module -Name $fullPath -DisableNameChecking -ErrorAction SilentlyContinue\n\n$heatTemplateName = \"WindowsTelegraf\"\n$telegrafAgentUrl = \"https://dl.influxdata.com/telegraf/releases/telegraf-1.12.1_windows_amd64.zip\"\n$telegrafconfigUrl = \"https://raw.githubusercontent.com/n-mohan/statuscheck/master/telegraf_nonprod.conf\"\n$telegrafziplocation = Join-Path $Env:Programfiles \"telegraf-1.12.1_windows_amd64.zip\"\n$telegrafpath = $Env:Programfiles\n$telegrafexepath = Join-Path $Env:Programfiles \"telegraf\\telegraf.exe\"\n$telegrafconfpath = Join-Path $Env:Programfiles \"telegraf\\telegraf.conf\"\n$metadataurl = \"http://169.254.169.254/openstack/latest/meta_data.json\"\n$metadatapath = Join-Path $Env:Programfiles \"telegraf\\meta_data.json\"\n$param = \"/c --service install\"\n$text = \"Write-Output `\"longrunning,tag=1 ln=2,rcb=1,runq=2 `\"\"\n\nfunction Log {\n    param(\n        $message\n    )\n    LogTo-File -LogMessage $message -Topic $heatTemplateName\n    Log-HeatMessage $message\n}\n\nfunction Install-TelegrafAgent {\n    try {\n        Log \"Telegraf agent installation started\"\n        #Invoke-WebRequest -Uri $telegrafAgentUrl -OutFile $telegrafziplocation\n        Invoke-WebRequest -Uri $telegrafAgentUrl -Proxy 'http://10.157.240.254:8678' -OutFile $telegrafziplocation\n        unzip  $telegrafziplocation $telegrafpath\n        Invoke-WebRequest -Uri $telegrafconfigUrl -Proxy 'http://10.157.240.254:8678' -OutFile $telegrafconfpath\n        configchange $metadataurl $metadatapath $telegrafconfpath\n        createfile $text\n        cd C:\\'Program Files'\\telegraf\n        .\\telegraf.exe --service install\n        net start telegraf\n        $successMessage = \"Finished Telegraf Agent installation\"\n        Log $successMessage\n        } catch {\n        $failMessage = \"Installation encountered an error\"\n        Log $failMessage\n        Log \"Exception details: $_.Exception.Message\"\n    }\n}\n\nExport-ModuleMember -Function Install-TelegrafAgent -ErrorAction SilentlyContinue\n"}

  utils_module:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: { get_file: "heat-powershell-utils.psm1" }

  telegraf_agent_module:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: { get_file: "telegrafagent.psm1" }

  telegraf_agent_main:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: { get_file: "telegrafagent.ps1" }
          params:
            proxy_ip:
              { get_param: proxy_ip }

  telegraf_agent_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        [ {
            filename: "heat-powershell-utils.psm1",
            subtype: "x-cfninitdata",
            config: { get_resource: utils_module }
          },
          {
            filename: "telegrafagent.psm1",
            subtype: "x-cfninitdata",
            config: { get_resource: telegraf_agent_module }
          },
          {
            filename: "cfn-userdata",
            subtype: "x-cfninitdata",
            config: { get_resource: telegraf_agent_main }
          }
        ]


  server:
    type: OS::Nova::Server
    depends_on: [ server_port, telegraf_agent_init ]
    properties:
      name: { get_param: serverName }
      image: { get_param: bootImage }
      availability_zone: { get_param: vmAvailabilityZone }
      key_name: { get_param: key }
      flavor: { get_param: flavor}
      networks:
        - port: { get_resource: server_port }
      user_data_format: RAW
      user_data: { get_resource: telegraf_agent_init }

outputs:
  network:
    description: ip address of vm
    value: { get_attr: [ server, networks ] }
